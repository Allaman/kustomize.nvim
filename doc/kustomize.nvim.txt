*kustomize.nvim.txt*      For Neovim >= 0.8.0     Last change: 2023 January 05

==============================================================================
Table of Contents                           *kustomize.nvim-table-of-contents*

  - Requirements                                 |kustomize.nvim-requirements|
  - Quickstart                                     |kustomize.nvim-quickstart|
  - Default mappings                         |kustomize.nvim-default-mappings|
  - Use cases                                       |kustomize.nvim-use-cases|

<h1 align="center">

kustomize.nvim

</h1>

<img src="https://img.shields.io/badge/NeoVim-%2357A143.svg?&style=for-the-badge&logo=neovim&logoColor=white" alt="Neovim"/>
<img src="https://img.shields.io/badge/lua-%232C2D72.svg?style=for-the-badge&logo=lua&logoColor=white" alt="Lua"/>



I work a lot with Kustomize <https://kustomize.io/> and I love Neovim. So why
not write a plugin for some tasks for that I usually switch to a shell. Jump to
the |kustomize.nvim-use-cases| to check out what this plugin can do!

REQUIREMENTS                                     *kustomize.nvim-requirements*


- `kustomize` in your PATH to |kustomize.nvim-build-manifests|
- kubeconform <https://github.com/yannh/kubeconform> in your PATH to |kustomize.nvim-validate-manifests|
- plenary.nvim <https://github.com/nvim-lua/plenary.nvim>


QUICKSTART                                         *kustomize.nvim-quickstart*

With Packer:

>lua
      use({
        "allaman/kustomize.nvim",
        requires = "nvim-lua/plenary.nvim",
        ft = "yaml",
        config = function()
          require('kustomize').setup({
            defaults = true
          })
        end,
      })
<


DEFAULT MAPPINGS                             *kustomize.nvim-default-mappings*

│Mode│ Mapping  │    Action     │                  Lua                   │          Command           │
│n   │<leader>kb│Kustomize build│lua require("kustomize").build()        │:KustomizeBuild             │
│n   │<leader>kk│List kinds     │lua require("kustomize").kinds()        │:KustomizeListKinds         │
│n   │<leader>kr│Print resources│lua require("kustomize").resources()    │:KustomizePrintResources    │
│v   │<leader>ko│Open file      │lua require("kustomize").open()         │:KustomizeOpenResource      │
│v   │<leader>kv│Validate file  │lua require("kustomize").validate()     │:KustomizeValidate          │


You can define your own keybindings/override the default mappings:

>lua
      use({
        "allaman/kustomize.nvim",
        requires = "nvim-lua/plenary.nvim",
        ft = "yaml",
        config = function()
          require('kustomize').setup({
            defaults = false
          })
          -- default keybindings, adjust to your needs
          vim.keymap.set("n", "<leader>kb", "<cmd>lua require('kustomize').build()<cr>", { noremap = true })
          vim.keymap.set("n", "<leader>kk", "<cmd>lua require('kustomize').kinds()<cr>", { noremap = true })
          vim.keymap.set("v", "<leader>ko", "<cmd>lua require('kustomize').open()<cr>", { noremap = true })
          vim.keymap.set("v", "<leader>kv", "<cmd>lua require('kustomize').validate()<cr>", { noremap = true })
        end,
      })
<


USE CASES                                           *kustomize.nvim-use-cases*

BUILD MANIFESTS ~

Showcase

</summary

![kustomize.nvim-build.gif](https://s1.gifyu.com/images/kustomize.nvim-build.gif)

</details>

If your buffer contains a `kustomization.yaml` this command will run `kustomize
build .` in the buffer’s directory. The generated YAML will printed to a new
buffer. The new buffer can be closed by just typing `q`. This allows me to
quickly inspect the YAML that Kustomize generates (and ultimately is applied to
the cluster). In addition, I get fast feedback on any errors in my YAML
sources.

LIST "KINDS" ~

Showcase

</summary

![kustomize.nvim-kinds.gif](https://s4.gifyu.com/images/kustomize.nvim-kinds.gif)

</details>

Sometimes, I just want to roughly check the YAMLs generated by Kustomize. A
good hint is to check the `kind:` key of the generated YAML manifests. This
command will parse all resource types in the current buffer and prints them to
a new buffer. The new buffer can be closed by just typing `q`. You could use it
on any YAML file with multiple resources, for instance generated by
|kustomize.nvim-build-manifests|

OPEN FILE/DIRECTORY ~

Showcase

</summary

![kustomize.nvim-open.gif](https://s4.gifyu.com/images/kustomize.nvim-open.gif)

</details>

You list your YAMLs that should be included by Kustomize for the build of the
final manifests like so:

>yaml
    ---
    apiVersion: kustomize.config.k8s.io/v1beta1
    kind: Kustomization
    resources:
      - service1/
      - grafana-dashboard.yaml
      - ../../base/namespace.yaml
<


In order to quickly check/edit those included YAMLs this command will open a
visually selected file in the current window in a new buffer. `..` is
supported. Folders are opened via `netrw`.

LIST RESOURCE FILES ~

Showcase

</summary

[![kustomize.nvim-resources.gif](https://s4.gifyu.com/images/kustomize.nvim-resources.gif)](https://gifyu.com/image/ShTyF)

</details>

When writing a new deployment I usually split the resources into files
according to their type, for instance `deployment.yaml`, `cm.yaml`, or
`sa.yaml`. When writing my `kustomization.yaml` I must add all resource files
which does this command for me.

VALIDATE RESOURCES ~

Showcase

</summary

[![kustomize.nvim-validate.gif](https://s1.gifyu.com/images/kustomize.nvim-validate.gif)](https://gifyu.com/image/ShQmx)

</details>

kubeconform <https://github.com/yannh/kubeconform> is a Kubernetes manifests
validator that can detect a misconfiguration before you apply your manifests to
your cluster. This command runs `kubeconform --strict --ignore-missing-schemas`
on the current buffer. The buffer’s content may be a file on disk or content
not (yet) saved, e.g. the output of |kustomize.nvim-build-manifests|.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
