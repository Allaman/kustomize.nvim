*kustomize.nvim.txt*       For Neovim >= 0.9.0      Last change: 2023 April 21

==============================================================================
Table of Contents                           *kustomize.nvim-table-of-contents*

  - Requirements                                 |kustomize.nvim-requirements|
  - Quickstart                                     |kustomize.nvim-quickstart|
  - Default mappings                         |kustomize.nvim-default-mappings|
  - Default configuration               |kustomize.nvim-default-configuration|
  - Use cases                                       |kustomize.nvim-use-cases|
kustomize.nvim

I work a lot with Kustomize <https://kustomize.io/> and I love Neovim. So why
not write a plugin for some tasks for that I usually switch to a shell. Jump to
the |kustomize.nvim-use-cases| to check out what this plugin can do!


REQUIREMENTS                                     *kustomize.nvim-requirements*


- Neovim >= 0.9
- `kustomize` in your PATH to |kustomize.nvim-build-manifests|
- kubeconform <https://github.com/yannh/kubeconform> in your PATH to |kustomize.nvim-validate-manifests|
- plenary.nvim <https://github.com/nvim-lua/plenary.nvim>
- nvim-treesitter <https://github.com/nvim-treesitter/nvim-treesitter> and `yaml` parser


QUICKSTART                                         *kustomize.nvim-quickstart*

With Packer:

>lua
      use({
        "allaman/kustomize.nvim",
        requires = "nvim-lua/plenary.nvim",
        ft = "yaml",
        config = function()
          require('kustomize').setup()
        end,
      })
<

With Lazy

>lua
    {
      "allaman/kustomize.nvim",
      requires = "nvim-lua/plenary.nvim",
      ft = "yaml",
      config = true,
    }
<


DEFAULT MAPPINGS                             *kustomize.nvim-default-mappings*

  ---------------------------------------------------------------------------------------------------------
  Mode   Mapping      Action        Lua                                          Command
  ------ ------------ ------------- -------------------------------------------- --------------------------
  n      <leader>kb   Kustomize     lua require("kustomize").build()             :KustomizeBuild
                      build                                                      

  n      <leader>kk   List kinds    lua require("kustomize").kinds()             :KustomizeListKinds

  n      <leader>kr   Print         lua require("kustomize").print_resources()   :KustomizePrintResources
                      resources                                                  

  n      <leader>ko   List          lua require("kustomize").list_resources()    :KustomizeListResources
                      ‘resources’                                                

  n      <leader>kv   Validate file lua require("kustomize").validate()          :KustomizeValidate
  ---------------------------------------------------------------------------------------------------------
You can define your own keybindings/override the default mappings:

>lua
      use({
        "allaman/kustomize.nvim",
        requires = "nvim-lua/plenary.nvim",
        ft = "yaml",
        opts = { enable_key_mappings = false },
        config = function(opts)
          require('kustomize').setup({opts})
          -- default keybindings, adjust to your needs
          vim.keymap.set("n", "<leader>kb", "<cmd>lua require('kustomize').build()<cr>", { noremap = true })
          vim.keymap.set("n", "<leader>kk", "<cmd>lua require('kustomize').kinds()<cr>", { noremap = true })
          vim.keymap.set("n", "<leader>kl", "<cmd>lua require('kustomize').list_resources()<cr>", { noremap = true })
          vim.keymap.set("n", "<leader>kp", "<cmd>lua require('kustomize').print_resources()<cr>", { noremap = true })
          vim.keymap.set("n", "<leader>kv", "<cmd>lua require('kustomize').validate()<cr>", { noremap = true })
        end,
      })
<


DEFAULT CONFIGURATION                   *kustomize.nvim-default-configuration*

This is the default configuration that can be (partially) overwritten by you.

>lua
    {
        enable_key_mappings = true,
        validate = { kubeconform_args = { "--strict", "--ignore-missing-schemas" } }
    }
<

With Lazy.nvim for instance:

>lua
      opts = { validate = { kubeconform_args = { "--strict" } } },
<


USE CASES                                           *kustomize.nvim-use-cases*


BUILD MANIFESTS ~

ShowcaseThis command will run `kustomize build .` in the current buffer’s directory.
The generated YAML will printed to a new buffer. The new buffer can be closed
by just typing `q`. This allows me to quickly inspect the YAML that Kustomize
generates (and ultimately is applied to the cluster). In addition, I get fast
feedback on any errors in my YAML sources.


LIST “KINDS” ~

ShowcaseSometimes, I just want to roughly check the YAMLs generated by Kustomize. A
good hint is to check the `kind:` key of the generated YAML manifests. This
command will parse all `kind:` keys with the help of tree-sitter in the current
buffer and prints their values to a new buffer. The new buffer can be closed by
just typing `q`. You could use it on any YAML file with multiple resources, for
instance generated by |kustomize.nvim-build-manifests|


OPEN FILE/DIRECTORY ~

ShowcaseYou list your YAMLs that should be included by Kustomize for the build of the
final manifests like so:

>yaml
    ---
    apiVersion: kustomize.config.k8s.io/v1beta1
    kind: Kustomization
    resources:
      - service1/
      - grafana-dashboard.yaml
      - ../../base/namespace.yaml
<

In order to quickly check/edit those included YAMLs this command will go
through all items in `resources:` and populate a quickfix list with them.


PRINT RESOURCE FILES ~

ShowcaseWhen writing a new deployment I usually split the resources into files
according to their type, for instance `deployment.yaml`, `cm.yaml`, or
`sa.yaml`. When writing my `kustomization.yaml` I must add all resource files
which does this command for me.


VALIDATE RESOURCES ~

Showcasekubeconform <https://github.com/yannh/kubeconform> is a Kubernetes manifests
validator that can detect a misconfiguration before you apply your manifests to
your cluster. This command runs `kubeconform --strict --ignore-missing-schemas`
on the current buffer. The buffer’s content may be a file on disk or content
not (yet) saved, e.g. the output of |kustomize.nvim-build-manifests|.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
